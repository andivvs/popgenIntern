##Script to count the number of contigs, their names and their lengths with and without bcftools
##Without bcftools
#!/bin/bash
VCF_FILE="MO_108.genotyped.SNP.and.INDEL.AN5.HardFilter.snpONLY.vcf.gz"
OUTPUT_FILE="contigs_info.txt"
zgrep "^##contig" "$VCF_FILE" | awk -F'[,=<>]' '  ## '[,=<>]' means that awk treats ,; =; <; and > as delimiters
{
   for (i=1; i<=NF; i++){
     if ($i == "ID") contig_name=$(i+1);
     if ($i == "length") contig_length=$(i+1);
 }
print "Contig:", contig_name, "Length:", contig_length; count++;
 }
END{
print "Number of contigs:", count;
 }'>"$OUTPUT_FILE"
echo "Contig information has been saved to $OUTPUT_FILE"
Contig information has been saved to contigs_info.txt
cat contigs_info.txt
Contig: chromosome_1 Length: 7978604
Contig: chromosome_2 Length: 8319966
Contig: chromosome_3 Length: 6606598
Contig: chromosome_4 Length: 5546968
Contig: chromosome_5 Length: 4490059
Contig: chromosome_6 Length: 4133993
Contig: chromosome_7 Length: 3415785
Number of contigs: 7

##With bcftools
VCF_FILE="MO_108.genotyped.SNP.and.INDEL.AN5.HardFilter.snpONLY.vcf.gz"
bcftools view -h "$VCF_FILE" | grep "^##contig" | awk -F'[,=<>]' ' {
    for (i=1; i<=NF; i++){
      if ($i == "ID") contig_name=$(i+1);
      if ($i == "length") contig_length=$(i+1);
  }
 print "Contig:", contig_name, "Length:", contig_length; count++;
}
 END{
 print "Number of contigs:", count;
  }'>"$OUTPUT_FILE"
OUTPUT_FILE="bcftools_contigs.txt"
cat bcftools_contigs.txt
Contig: chromosome_1 Length: 7978604
Contig: chromosome_2 Length: 8319966
Contig: chromosome_3 Length: 6606598
Contig: chromosome_4 Length: 5546968
Contig: chromosome_5 Length: 4490059
Contig: chromosome_6 Length: 4133993
Contig: chromosome_7 Length: 3415785
Number of contigs: 7



##RStudio PCA Commands
library(gdsfmt)
library(SNPRelate)
vcf.fn <- "/home/Downloads/MO_108.genotyped.SNP.and.INDEL.AN5.HardFilter.snpONLY.vcf.gz"
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
snpgdsSummary("test.gds")
genofile <- snpgdsOpen("test.gds")
set.seed(1000)
snpset <- snpgdsLDpruning(genofile, ld.threshold=0.2)
str(snpset)
names(snpset)
snpset.id <- unlist(unname(snpset))
head(snpset.id)
pca <- snpgdsPCA(genofile, snp.id=snpset.id, num.thread = 2)
pc.percent <- pca$varprop*100
head(round(pc.percent, 2))
tab <- data.frame(sample.id = pca$sample.id,
                  EV1 = pca$eigenvect[,1],
                  EV2 = pca$eigenvect[,2],
                  stringsAsFactors = FALSE)
head(tab)
plot(tab$EV2, tab$EV1, xlab="eigenvector 2", ylab="eigenvector 1")
