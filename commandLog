##Script to count the number of contigs, their names and their lengths with and without bcftools
##Without bcftools
#!/bin/bash
VCF_FILE="MO_108.genotyped.SNP.and.INDEL.AN5.HardFilter.snpONLY.vcf.gz"
OUTPUT_FILE="contigs_info.txt"
zgrep "^##contig" "$VCF_FILE" | awk -F'[,=<>]' '  ## '[,=<>]' means that awk treats ,; =; <; and > as delimiters
{
   for (i=1; i<=NF; i++){
     if ($i == "ID") contig_name=$(i+1);
     if ($i == "length") contig_length=$(i+1);
 }
print "Contig:", contig_name, "Length:", contig_length; count++;
 }
END{
print "Number of contigs:", count;
 }'>"$OUTPUT_FILE"
echo "Contig information has been saved to $OUTPUT_FILE"
Contig information has been saved to contigs_info.txt
cat contigs_info.txt
Contig: chromosome_1 Length: 7978604
Contig: chromosome_2 Length: 8319966
Contig: chromosome_3 Length: 6606598
Contig: chromosome_4 Length: 5546968
Contig: chromosome_5 Length: 4490059
Contig: chromosome_6 Length: 4133993
Contig: chromosome_7 Length: 3415785
Number of contigs: 7
##With bcftools
VCF_FILE="MO_108.genotyped.SNP.and.INDEL.AN5.HardFilter.snpONLY.vcf.gz"
bcftools view -h "$VCF_FILE" | grep "^##contig" | awk -F'[,=<>]' ' {
    for (i=1; i<=NF; i++){
      if ($i == "ID") contig_name=$(i+1);
      if ($i == "length") contig_length=$(i+1);
  }
 print "Contig:", contig_name, "Length:", contig_length; count++;
}
 END{
 print "Number of contigs:", count;
  }'>"$OUTPUT_FILE"
OUTPUT_FILE="bcftools_contigs.txt"
cat bcftools_contigs.txt
Contig: chromosome_1 Length: 7978604
Contig: chromosome_2 Length: 8319966
Contig: chromosome_3 Length: 6606598
Contig: chromosome_4 Length: 5546968
Contig: chromosome_5 Length: 4490059
Contig: chromosome_6 Length: 4133993
Contig: chromosome_7 Length: 3415785
Number of contigs: 7


##RStudio PCA Commands
library(gdsfmt)
library(SNPRelate)
vcf.fn <- "/home/Downloads/MO_108.genotyped.SNP.and.INDEL.AN5.HardFilter.snpONLY.vcf.gz"
snpgdsVCF2GDS(vcf.fn, "test.gds", method="biallelic.only")
snpgdsSummary("test.gds")
genofile <- snpgdsOpen("test.gds")
set.seed(1000)
snpset <- snpgdsLDpruning(genofile, ld.threshold=0.2)
str(snpset)
names(snpset)
snpset.id <- unlist(unname(snpset))
head(snpset.id)
pca <- snpgdsPCA(genofile, snp.id=snpset.id, num.thread = 2)
pc.percent <- pca$varprop*100
head(round(pc.percent, 2))
tab <- data.frame(sample.id = pca$sample.id,
                  EV1 = pca$eigenvect[,1],
                  EV2 = pca$eigenvect[,2],
                  stringsAsFactors = FALSE)
head(tab)
plot(tab$EV2, tab$EV1, xlab="eigenvector 2", ylab="eigenvector 1")


##Script to divide the samples into clusters
pca_matrix <- as.matrix(tab[, c("EV1", "EV2")])
rownames(pca_matrix) <- tab$sample.id
head(pca_matrix)
set.seed(123)
num_clusters <- 3
km_res <- kmeans(pca_matrix, centers = num_clusters)
tab$Cluster <- as.factor(km_res$cluster)
head(tab)
plot(tab$EV2, tab$EV1, col=tab$Cluster, pch=19,
     xlab="eigenvector 2", ylab="eigenvector 1")
legend("topleft", legend=levels(tab$Cluster), col=1:length(levels(tab$Cluster)), pch=19)
write.csv(tab, "PCA_with_clusters.csv", row.names=FALSE)


##Script to create VCF FIles for each cluster with RStudio
tab <- read.csv("PCA_with_clusters.csv")
clusters <- split(tab, tab$Cluster)
for (i in names(clusters)) {
  filename <- paste0("Cluster_", i, ".txt")
  write.table(clusters[[i]], file = filename, row.names = FALSE, col.names = TRUE, sep = "\t", quote = FALSE)
  cat("Saved:", filename, "\n")
}
cluster1 <- tab[tab$Cluster == 1, ]
cluster2 <- tab[tab$Cluster == 2, ]
cluster3 <- tab[tab$Cluster == 3, ]
str(cluster1)
str(cluster2)
str(cluster3)
write.table(cluster1$sample.id, file="Cluster_1_fixed.txt", quote=FALSE, row.names=FALSE, col.names=FALSE)
write.table(cluster2$sample.id, file="Cluster_2_fixed.txt", quote=FALSE, row.names=FALSE, col.names=FALSE)
write.table(cluster3$sample.id, file="Cluster_3_fixed.txt", quote=FALSE, row.names=FALSE, col.names=FALSE)
file.show("Cluster_1_fixed.txt")
file.show("Cluster_2_fixed.txt")
file.show("Cluster_3_fixed.txt")


##Script to create VCFs Files with Linux
bcftools view -S Cluster_1_fixed.txt MO_108.genotyped.SNP.and.INDEL.AN5.HardFilter.snpONLY.vcf.gz -Oz -o Cluster_1.vcf.gz
bcftools view -S Cluster_2_fixed.txt MO_108.genotyped.SNP.and.INDEL.AN5.HardFilter.snpONLY.vcf.gz -Oz -o Cluster_2.vcf.gz
bcftools view -S Cluster_3_fixed.txt MO_108.genotyped.SNP.and.INDEL.AN5.HardFilter.snpONLY.vcf.gz -Oz -o Cluster_3.vcf.gz


##Script for Python
import sys
!{sys.executable} -m pip install scikit-allel

%pip install scikit-allel

%pip install matplotlib

import allel
import numpy as np
import matplotlib.pyplot as plt

def compute_windowed_diversity(vcf_file, window_size=20000, step_size=10000):
   
    callset = allel.read_vcf(vcf_file) 
    genotypes = allel.GenotypeArray(callset['calldata/GT'])
    pos = callset['variants/POS']
    
    sort_idx = np.argsort(pos)
    pos = np.sort(pos)  
    ac = genotypes.count_alleles()
    ac = ac[sort_idx]

    pi_windows, windows, counts, _ = allel.windowed_diversity(pos, ac, size=window_size, step=step_size)


    mean_pi = np.mean(pi_windows)
    median_pi = np.median(pi_windows)

    print(f"\nResults for {vcf_file}:")
    print(f"Mean nucleotide diversity (π): {mean_pi}")
    print(f"Median nucleotide diversity (π): {median_pi}")

    for i in range(min(5, len(windows))):
        print(f"Window {i+1}: {windows[i]}, π: {pi_windows[i]}")

    plt.figure(figsize=(10, 5))
    plt.plot(windows[:, 0], pi_windows, marker='o', linestyle='-')
    plt.xlabel('Genomic Position (bp)')
    plt.ylabel('Nucleotide Diversity (π)')
    plt.title(f'Nucleotide Diversity in {vcf_file}')
    plt.grid()
    plt.show()

vcf_files = ["Cluster_1.vcf.gz", "Cluster_2.vcf.gz", "Cluster_3.vcf.gz"]
for vcf in vcf_files:
    compute_windowed_diversity(vcf)

##Results##

Results for Cluster_1.vcf.gz:
Mean nucleotide diversity (π): 0.001371464191958016
Median nucleotide diversity (π): 0.00033297173183614246
Window 1: [  300 20299], π: 0.012583848202795182
Window 2: [10300 30299], π: 0.009865218829427492
Window 3: [20300 40299], π: 0.006953493805719872
Window 4: [30300 50299], π: 0.00596050591305106
Window 5: [40300 60299], π: 0.002475006884254919

Results for Cluster_2.vcf.gz:
Mean nucleotide diversity (π): 0.0013437334934659362
Median nucleotide diversity (π): 0.00036172475199698536
Window 1: [  300 20299], π: 0.012237870436026496
Window 2: [10300 30299], π: 0.008400776025523454
Window 3: [20300 40299], π: 0.003252378077552649
Window 4: [30300 50299], π: 0.002410482574146657
Window 5: [40300 60299], π: 0.0016070616323983053

Results for Cluster_3.vcf.gz:
Mean nucleotide diversity (π): 0.0021338666236972925
Median nucleotide diversity (π): 0.0010768745377765772
Window 1: [  300 20299], π: 0.010360405397462202
Window 2: [10300 30299], π: 0.009021167658749768
Window 3: [20300 40299], π: 0.005391248937587441
Window 4: [30300 50299], π: 0.005892668347995613
Window 5: [40300 60299], π: 0.007122259767572732
